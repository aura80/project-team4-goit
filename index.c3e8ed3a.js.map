{"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,WAC5C,MAEMC,EAAQF,SAASG,eAAe,WAChCC,EAAOJ,SAASK,uBAAuB,SAAS,GAChDC,EAAiBN,SAASG,eAAe,kBACzCI,EAAiBP,SAASG,eAAe,kBAE/CG,EAAeL,iBAAiB,SAAS,SAAUO,GACjD,MAAMC,EAASD,EAAMC,OAAOC,QAAQ,eAChCD,IACFP,EAAMS,MAAMC,QAAU,QACtBL,EAAeM,YAAcJ,EAAOK,QAAQC,K,IAI/CX,EAAIY,QAAU,WACbd,EAAMS,MAAMC,QAAU,M,EAExBK,OAAOD,QAAU,SAAUR,GACrBA,EAAMC,QAAUP,IAClBA,EAAMS,MAAMC,QAAU,O,EAKxBM,MAxBa,iGAyBVC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IAiBV,IAAwBC,EAhBlBC,QAAQC,IAAI,kBAAmBH,GAC3BA,EAAKI,WAAaJ,EAAKI,UAAUH,QAenBA,EAdDD,EAAKI,UAAUH,OAepCjB,EAAeqB,UAAY,GAC3BJ,EAAOK,SAAQpB,IACb,MAAMqB,EAAY7B,SAAS8B,cAAc,OACzCD,EAAUE,UAAUC,IAAI,cACxBH,EAAUf,QAAQC,KAAOP,EAAMO,KAC/Bc,EAAUf,QAAQmB,IAAMzB,EAAMyB,IAE5BJ,EAAQf,QAAQoB,YAAc1B,EAAMyB,IAAM,oBAE5CT,QAAQC,IACN,oCACAI,EAAUf,QAAQoB,aAEpB,MAAMC,EAAYnC,SAAS8B,cAAc,MACzCK,EAAUtB,YAAcL,EAAMO,KAC9Bc,EAAUO,YAAYD,GACtB,MAAME,EAAYrC,SAAS8B,cAAc,KACzCO,EAAUxB,YAAc,IAAIyB,KAC1B9B,EAAM+B,MAAMC,MAAMC,UAClBC,qBACFb,EAAUO,YAAYC,GACtB,MAAMM,EAAgB3C,SAAS8B,cAAc,KAC7Ca,EAAc9B,YAAc,GAAGL,EAAMkB,UAAUkB,OAAO,GAAG7B,SAASP,EAAMkB,UAAUkB,OAAO,GAAGC,KAAK9B,OACjGc,EAAUO,YAAYO,GACtBrC,EAAe8B,YAAYP,GAC3BL,QAAQC,IAAI,gCAAiCjB,EAAMO,KAAK,MArCpDS,QAAQsB,MAAM,mCACdxC,EAAeqB,UAAY,0B,IAG9BoB,OAAMD,IACLtB,QAAQsB,MAAM,yBAA0BA,GACxCxC,EAAeqB,UACb,uDAAuD,G,ICzCjE3B,SAASC,iBAAiB,oBAAoB,WAC5C,MAAM+C,EAAkBhD,SAASG,eAAe,mBAC1C8C,EAA0BjD,SAASG,eACvC,2BAEF,IAAI+C,EAAkB,GAClBC,EAA0B,GAEzBH,EAAWhC,QAAU,WACxBQ,QAAQC,IAAI,eAAgByB,GACxBA,EACFjC,OAAOmC,KAAKF,EAAiB,UAE7B1B,QAAQsB,MAAM,mC,EAIbG,EAAmBjC,QAAU,WAChCQ,QAAQC,IAAI,wBAAyB0B,GACjCA,EACFlC,OAAOmC,KAAKD,EAAyB,UAErC3B,QAAQsB,MAAM,4C,EAIlB7B,OAAOhB,iBAAiB,SAAS,SAAUO,GACzC,MAAMC,EAASD,EAAMC,OAAOC,QAAQ,eAChCD,IACFyC,EAAkBzC,EAAOK,QAAQmB,IACjCkB,EAA0B1C,EAAOK,QAAQoB,YACzCV,QAAQC,IAAI,+BAAgCyB,GAC5C1B,QAAQC,IACN,wCACA0B,G","sources":["src/js/booster.js","src/js/booster-api.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n  const apiKey = 'ABgCFeGHE7lHgwV23hsJAFL80GX9ypoh'; // Cheia ta API\n  const apiUrl = `https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}`;\n  const modal = document.getElementById('myModal');\n  const span = document.getElementsByClassName('close')[0];\n  const eventContainer = document.getElementById('eventContainer');\n  const modalEventName = document.getElementById('modalEventName');\n  // Deschide modalul\n  eventContainer.addEventListener('click', function (event) {\n    const target = event.target.closest('.event-card');\n    if (target) {\n      modal.style.display = 'block';\n      modalEventName.textContent = target.dataset.name;\n    }\n  });\n  // Închide modalul\n  span.onclick = function () {\n    modal.style.display = 'none';\n  };\n  window.onclick = function (event) {\n    if (event.target == modal) {\n      modal.style.display = 'none';\n    }\n  };\n  // Fetch events from Ticketmaster API\n  function fetchEvents() {\n    fetch(apiUrl)\n      .then(response => response.json())\n      .then(data => {\n        console.log('Events fetched:', data); // Log pentru verificare\n        if (data._embedded && data._embedded.events) {\n          const events = data._embedded.events;\n          populateEvents(events);\n        } else {\n          console.error('No events found in the response');\n          eventContainer.innerHTML = '<p>No events found.</p>';\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching events:', error);\n        eventContainer.innerHTML =\n          '<p>Error fetching events. Please try again later.</p>';\n      });\n  }\n  // Populate the page with event data\n  function populateEvents(events) {\n    eventContainer.innerHTML = ''; // Clear previous content\n    events.forEach(event => {\n      const eventCard = document.createElement('div');\n      eventCard.classList.add('event-card');\n      eventCard.dataset.name = event.name;\n      eventCard.dataset.url = event.url; // Stochează URL-ul în data attribute\n      // Exemplu pentru URL-ul standard, verifică documentația pentru formatul corect\n      eventCard.dataset.standardUrl = event.url + '?pricing=standard';\n      // Adaugă log-uri pentru verificare\n      console.log(\n        'Standard URL generated for event:',\n        eventCard.dataset.standardUrl\n      );\n      const eventName = document.createElement('h3');\n      eventName.textContent = event.name;\n      eventCard.appendChild(eventName);\n      const eventDate = document.createElement('p');\n      eventDate.textContent = new Date(\n        event.dates.start.dateTime\n      ).toLocaleDateString();\n      eventCard.appendChild(eventDate);\n      const eventLocation = document.createElement('p');\n      eventLocation.textContent = `${event._embedded.venues[0].name}, ${event._embedded.venues[0].city.name}`;\n      eventCard.appendChild(eventLocation);\n      eventContainer.appendChild(eventCard);\n      console.log('Event card created for event:', event.name); // Log pentru verificare\n    });\n  }\n  // Fetch events when the page loads\n  fetchEvents();\n});\n","document.addEventListener('DOMContentLoaded', function () {\n  const buyTicketButton = document.getElementById('buyTicketButton');\n  const buyStandardTicketButton = document.getElementById(\n    'buyStandardTicketButton'\n  );\n  let currentEventUrl = ''; // Variabilă pentru a stoca URL-ul evenimentului curent\n  let currentStandardEventUrl = ''; // Variabilă pentru a stoca URL-ul standard al evenimentului curent\n  // Redirecționează către URL-ul de achiziție de bilete într-un tab nou\n  buyTicketButton.onclick = function () {\n    console.log('Opening URL:', currentEventUrl); // Log pentru verificare\n    if (currentEventUrl) {\n      window.open(currentEventUrl, '_blank');\n    } else {\n      console.error('No URL set for the current event');\n    }\n  };\n  // Redirecționează către URL-ul standard de achiziție de bilete într-un tab nou\n  buyStandardTicketButton.onclick = function () {\n    console.log('Opening Standard URL:', currentStandardEventUrl); // Log pentru verificare\n    if (currentStandardEventUrl) {\n      window.open(currentStandardEventUrl, '_blank');\n    } else {\n      console.error('No Standard URL set for the current event');\n    }\n  };\n  // Ascultă evenimentul de click pe cardurile de evenimente pentru a seta URL-urile curente\n  window.addEventListener('click', function (event) {\n    const target = event.target.closest('.event-card');\n    if (target) {\n      currentEventUrl = target.dataset.url;\n      currentStandardEventUrl = target.dataset.standardUrl;\n      console.log('**URL set for current event:', currentEventUrl); // Log pentru verificare\n      console.log(\n        '**Standard URL set for current event:',\n        currentStandardEventUrl\n      ); // Log pentru verificare\n    }\n  });\n});\n"],"names":["document","addEventListener","modal","getElementById","span","getElementsByClassName","eventContainer","modalEventName","event","target","closest","style","display","textContent","dataset","name","onclick","window","fetch","then","response","json","data","events","console","log","_embedded","innerHTML","forEach","eventCard","createElement","classList","add","url","standardUrl","eventName","appendChild","eventDate","Date","dates","start","dateTime","toLocaleDateString","eventLocation","venues","city","error","catch","buyTicketButton","buyStandardTicketButton","currentEventUrl","currentStandardEventUrl","open"],"version":3,"file":"index.c3e8ed3a.js.map"}